plot(d.count)
adf.test(d.count, alternative = "stationary", )
acf(d.count)
pacf(d.count)
arima(d.count, order = c(1, 0, 0))
arima(d.count, order = c(2, 0, 0))
arima(d.count, order = c(1, 0, 1))
arima(d.count, order = c(1, 0, 2))
arima(d.count, order = c(1, 0, 3))
arima(d.count, order = c(2, 0, 3))
arima(d.count, order = c(1, 0, 3))
arima(d.count, order = c(1, 1, 3))
arima(d.count, order = c(1, 0, 3))
arima(d.count, order = c(1, 0, 4))
final_model <- arima(train_data, c(1, 1, 3))
final_model <- arima(train_data$Count, c(1, 1, 3))
tsdiag(final_model)
predictions = read.csv(file = "C:/Users/Shri/Desktop/mera-time-series/Test_0qrQsBZ.csv")
dim(predictions)
predictions$Count <- predict(final_model, n.ahead = 5112)
predictions
head(predictions)
View(predictions)
test_data = read.csv(file = "C:/Users/Shri/Desktop/mera-time-series/Test_0qrQsBZ.csv")
dim(test_data)
predictions <- predict(final_model, n.ahead = 5112)
head(predictions)
tsdiag(final_model)
final_model <- arima(train_data$Count, c(1, 1, 5))
tsdiag(final_model)
test_data = read.csv(file = "C:/Users/Shri/Desktop/mera-time-series/Test_0qrQsBZ.csv")
dim(test_data)
predictions <- predict(final_model, n.ahead = 5112)
head(predictions)
install.packages('devtools')
MB)
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
q()
data <- read.csv(data = "C:/Users/Shri/Desktop/for_git/mera-time-series/Time-Series-Analysis/Train_SU63ISt.csv")
data <- read.csv(data = "C:/Users/Shri/Desktop/for_git/mera-time-series/Time-Series-Analysis/Train_SU63ISt.csv")
data <- read.csv(data = "C:/Users/Shri/Desktop/for_git/mera-time-series/Time-Series-Analysis/Train_SU63ISt.csv")
View(a)
data
print(data)
data <- read.csv("C:/Users/Shri/Desktop/for_git/mera-time-series/Time-Series-Analysis/Train_SU63ISt.csv")
View(data)
data <- data(c('Datetime', 'Count'))
data
data <- read.csv("C:/Users/Shri/Desktop/for_git/mera-time-series/Time-Series-Analysis/Train_SU63ISt.csv")
id <- data$Datetime
count <- data$Count
data <- as.data.frame(c(id, count))
data
View(data)
data <- read.csv("C:/Users/Shri/Desktop/for_git/mera-time-series/Time-Series-Analysis/Train_SU63ISt.csv")
id <- data$Datetime
count <- data$Count
data <- as.data.frame(id, count)
data
ts <- as.array(as.ts(data))
ts
data <- read.csv("C:/Users/Shri/Desktop/for_git/mera-time-series/Time-Series-Analysis/Train_SU63ISt.csv")
ts <- as.ts(data)
ts
View(ts)
summary(data$Count)
time <- as.ts(data = data)
time <- as.ts(x =  data)
View(time)
data <- read.csv("C:/Users/Shri/Desktop/for_git/mera-time-series/Time-Series-Analysis/Train_SU63ISt.csv")
data$Datetime <- as.ts(data$Datetime)
View(data)
data <- read.csv("C:/Users/Shri/Desktop/for_git/mera-time-series/Time-Series-Analysis/Train_SU63ISt.csv")
data(:)
data(:1)
data[:1]
data1 <- read.csv("C:/Users/Shri/Desktop/for_git/mera-time-series/Time-Series-Analysis/Train_SU63ISt.csv")
str(data1)
data1[data$ID]
dates
data(dates)
data1 <- subset(data1, select = c(Datetime, count
))
data1 <- subset(data1, select = c(data1$Datetime, data1$count))
data1 <- read.csv("C:/Users/Shri/Desktop/for_git/mera-time-series/Time-Series-Analysis/Train_SU63ISt.csv")
data1 <- subset(data1, select = c(data1$Datetime, data1$count))
data1 <- subset(data1, select = c(data1$Datetime, data1$Count))
data1 <- subset(data1, select = c(Datetime, Count))
data1
dlog <- log(data1$Count)
plot(dlog)
library("ggplot2")
qplot(dlog)
data1 <- read.csv("C:/Users/Shri/Desktop/for_git/mera-time-series/Time-Series-Analysis/Train_SU63ISt.csv")
dlog <- log(data1$Count)
qplot(x = dlog, y = data1$ID)
qplot(x = data1$ID, y = dlog)
ts <- as.ts(data1$Datetime)
dlog <- log(data1$Count)
ts
typeof(ts)
str(ts)
new <- as.data.frame(c(ts, dlog))
new
View(new)
new <- as.data.frame(x = c(ts, dlog))
new
View(new)
plot(dlog, type = 'b')
plot(dlog, type = 'l')
plot(data1$Count, type = 'l')
library("prophet")
new
View(new)
View(data)
data1 <- read.csv("C:/Users/Shri/Desktop/for_git/mera-time-series/Time-Series-Analysis/Train_SU63ISt.csv")
library("prophet")
data_clean <- data.frame(c(data1$Datetime, data1$Count))
data_clean
View(data_clean)
data_clean <- data.frame(data1$Datetime, data1$Count)
data_clean
View(data_clean)
library("prophet")
library('ggplot2')
qplot(data_clean$data1.Count)
qplot(data_clean$data1.Count, data_clean$data1.Datetime)
data1 <- read.csv("C:/Users/Shri/Desktop/for_git/mera-time-series/Time-Series-Analysis/Train_SU63ISt.csv")
library("prophet")
data_clean <- data.frame(data1$Datetime, data1$Count)
library("prophet")
library('ggplot2')
View(data_clean)
data_clean <- data.frame(data1$Datetime, data1$Count, `colnames<-c('Datetime', 'Count'))
;
)
data_clean <- data.frame(data1$Datetime, data1$Count, `colnames<-c('Datetime', 'Count'))
library("prophet")
library('ggplot2')
qplot(data_clean$, data_clean$data1.Datetime)
qplot(data_clean$data1.Count)
qplot(data_clean$data1.Datetime, data_clean$data1.Count, data = data_clean)
qplot(data_clean$data1.Count, data = data_clean)
plot(log10(data_clean$data1.Count))
plot(log(data_clean$data1.Count))
plot.ts(data_clean)
plot.ts(data_clean$data1.Count)
plot.ts(log(data_clean$data1.Count))
plot.ts(diff(log(data_clean$data1.Count)))
sam <- sample(x=data_clean, size = 0.68)
sam
View(sam)
plot(sample(data_clean$data1.Count, size = 0.68))
sam <- sample(data_clean$data1.Count, size = 0.68)
lm(data_clean)
mod <- lm(data = data_clean)
plot(mod)
plot(mod$qr)
plot(mod$coefficients)
a <- read.csv("C:/Users/Shri/Downloads/train.csv")
str(a)
summary(a)
plot(a$Product_Category_1)
summary(a)
View(a)
train <- read.csv("train.csv")
setwd("C:/Users/Shri/Desktop/for_git/black_friday_competition")
setwd("C:/Users/Shri/Desktop/for_git/black_friday_competition")
train <- read.csv("train.csv")
test <- read.csv("test.csv")
summary(train)
str(train)
typeof(train$Age)
table(train$Age, useNA = "ifany")
train$Age <- as.numeric(train$Age)
table(train$Gender)
typeof(train$Gender)
train$Gender <- as.numeric(train$Gender)
table(train$City_Category)
typeof(train$City_Category)
train$City_Category <- as.numeric(train$City_Category)
table(train$Stay_In_Current_City_Years)
typeof(train$Stay_In_Current_City_Years)
train$Stay_In_Current_City_Years <- as.numeric(train$Stay_In_Current_City_Years)
table(train$Product_Category_1, useNA = "ifany")
table(train$Product_Category_2, useNA = "ifany")
table(train$Product_Category_3, useNA = "ifany")
# https://www.statmethods.net/advstats/cart.html
library("rpart")
train$Product_Category_2[is.na(train$Product_Category_2)] <- 0
train$Product_Category_2 <- factor(train$Product_Category_2)
train$Product_Category_3[is.na(train$Product_Category_3)] <- 0
train$Product_Category_3 <- factor(train$Product_Category_3)
summary(train)
# Modelling
# https://www.statmethods.net/advstats/cart.html
#install.packages("rpart")
library("rpart")
?rpart
length(train)
dim(train)
a <- dim(train)
a[1]
train_sample <- sample(shape[1], 545000)
shape <- dim(train)
train_sample <- sample(shape[1], 545000)
train_data <- train[train_sample,]
test_data <- train[-train_sample,]
model <- rpart(Purchase ~ ., data = train_data)
plot(model)
printcp(model)
plotcp(model)
summary(model)
test_label <- test_data$Purchase
test_data[drop(test_data$Purchase)]
test_data<- drop(test_data$Purchase)
test_data
View(test_data)
train <- read.csv("train.csv")
test <- read.csv("test.csv")
summary(train)
str(train)
# Column - Age
typeof(train$Age)
table(train$Age, useNA = "ifany")
train$Age <- as.numeric(train$Age)
# Column - Gender
table(train$Gender)
typeof(train$Gender)
train$Gender <- as.numeric(train$Gender)
# Column - City_Category
table(train$City_Category)
typeof(train$City_Category)
train$City_Category <- as.numeric(train$City_Category)
# Column - Stay_In_Current_City_Years
table(train$Stay_In_Current_City_Years)
typeof(train$Stay_In_Current_City_Years)
train$Stay_In_Current_City_Years <- as.numeric(train$Stay_In_Current_City_Years)
# Column - Stay_In_Current_City_Years
table(train$Stay_In_Current_City_Years)
typeof(train$Stay_In_Current_City_Years)
train$Stay_In_Current_City_Years <- as.numeric(train$Stay_In_Current_City_Years)
# Column - Product_Category_1, Product_Category_2, Product_Category_3
table(train$Product_Category_1, useNA = "ifany")
table(train$Product_Category_2, useNA = "ifany")
table(train$Product_Category_3, useNA = "ifany")
train$Product_Category_2[is.na(train$Product_Category_2)] <- 0
train$Product_Category_2 <- factor(train$Product_Category_2)
train$Product_Category_3[is.na(train$Product_Category_3)] <- 0
train$Product_Category_3 <- factor(train$Product_Category_3)
summary(train)
str(train)
# Modelling
# https://www.statmethods.net/advstats/cart.html
#install.packages("rpart")
library("rpart")
set.seed(12)
shape <- dim(train)
# Split the training data into train and test
# First we will test the accuracy of model on the data where we have labels and find RMSE
train_sample <- sample(shape[1], 545000)
train_data <- train[train_sample,]
test_data <- train[-train_sample,]
test_label <- test_data$Purchase
test_data <- test_data[-Purchase]
test_data <- test_data[-test_data$Purchase]
View(test_data)
model <- rpart(Purchase ~ ., data = train_data)
model <- rpart(Purchase ~ ., data = train_data)
predict <- predict(test_data)
predict <- predict(model, test_data)
predict
final_res <- data.frame(cbind(test_label, predict))
View(final_res)
View(final_res)
error <- test_label - predict
final_res <- data.frame(cbind(test_label, predict, error))
library("randomForest")
ran_model <- randomForest(Purchase ~ ., data = train_data)
str(train_data)
train <- read.csv("train.csv")
length(test_label)
RMSE <- sum(error)^2 / length(test_label)
print(RMSE)
2^2
2^3
3^3
train_data_rf <- train_data[train_data$Product_ID]
train <- read.csv("train.csv")
test <- read.csv("test.csv")
summary(train)
str(train)
# Column - Age
typeof(train$Age)
table(train$Age, useNA = "ifany")
train$Age <- as.numeric(train$Age)
# Column - Gender
table(train$Gender)
typeof(train$Gender)
train$Gender <- as.numeric(train$Gender)
# Column - City_Category
table(train$City_Category)
typeof(train$City_Category)
train$City_Category <- as.numeric(train$City_Category)
# Column - Stay_In_Current_City_Years
table(train$Stay_In_Current_City_Years)
typeof(train$Stay_In_Current_City_Years)
train$Stay_In_Current_City_Years <- as.numeric(train$Stay_In_Current_City_Years)
# Column - Product_Category_1, Product_Category_2, Product_Category_3
table(train$Product_Category_1, useNA = "ifany")
table(train$Product_Category_2, useNA = "ifany")
table(train$Product_Category_3, useNA = "ifany")
train$Product_Category_2[is.na(train$Product_Category_2)] <- 0
train$Product_Category_2 <- factor(train$Product_Category_2)
train$Product_Category_3[is.na(train$Product_Category_3)] <- 0
train$Product_Category_3 <- factor(train$Product_Category_3)
# Modelling
# https://www.statmethods.net/advstats/cart.html
#install.packages("rpart")
library("rpart")
set.seed(12)
shape <- dim(train)
# Split the training data into train and test
# First we will test the accuracy of model on the data where we have labels and find RMSE
train_sample <- sample(shape[1], 545000)
train_data <- train[train_sample,]
test_data <- train[-train_sample,]
test_label <- test_data$Purchase
test_data <- test_data[-test_data$Purchase]
# install.packages("randomForest")
library("randomForest")
train_data_rf <- train_data[train_data$Product_ID]
View(train_data)
train_data_rf <- train_data[-train_data$Product_ID]
train_data_rf <- train_data[-train_data$Product_ID, ]
train_data_rf <- train_data[-train_data$Product_ID]
View(train_data)
View(train_data_rf)
train <- read.csv("train.csv")
test <- read.csv("test.csv")
summary(train)
str(train)
# Column - Age
typeof(train$Age)
table(train$Age, useNA = "ifany")
train$Age <- as.numeric(train$Age)
# Column - Gender
table(train$Gender)
typeof(train$Gender)
train$Gender <- as.numeric(train$Gender)
# Column - City_Category
table(train$City_Category)
typeof(train$City_Category)
train$City_Category <- as.numeric(train$City_Category)
# Column - Stay_In_Current_City_Years
table(train$Stay_In_Current_City_Years)
typeof(train$Stay_In_Current_City_Years)
train$Stay_In_Current_City_Years <- as.numeric(train$Stay_In_Current_City_Years)
# Column - Product_Category_1, Product_Category_2, Product_Category_3
table(train$Product_Category_1, useNA = "ifany")
table(train$Product_Category_2, useNA = "ifany")
table(train$Product_Category_3, useNA = "ifany")
train$Product_Category_2[is.na(train$Product_Category_2)] <- 0
train$Product_Category_2 <- factor(train$Product_Category_2)
train$Product_Category_3[is.na(train$Product_Category_3)] <- 0
train$Product_Category_3 <- factor(train$Product_Category_3)
summary(train)
str(train)
# Split the training data into train and test
# First we will test the accuracy of model on the data where we have labels and find RMSE
train_sample <- sample(shape[1], 545000)
train_data <- train[train_sample,]
test_data <- train[-train_sample,]
train_data_rf <- train_data
View(train_data_rf)
train_data_rf <- train_data
train_data_rf <- train_data_rf[-train_data_rf$Product_ID]
train_data_rf$Product_ID <- as.character(train_data_rf$Product_ID)
train_data_rf <- train_data_rf[-train_data_rf$Product_ID]
str(train_data_rf)
train_data_rf$Product_ID <- as.integer(train_data_rf$Product_ID)
train_data_rf <- train_data_rf[-train_data_rf$Product_ID]
View(train_data_rf)
# install.packages("randomForest")
library("randomForest")
train <- read.csv("train.csv")
test <- read.csv("test.csv")
summary(train)
str(train)
# Column - Age
typeof(train$Age)
table(train$Age, useNA = "ifany")
train$Age <- as.numeric(train$Age)
# Column - Gender
table(train$Gender)
typeof(train$Gender)
train$Gender <- as.numeric(train$Gender)
# Column - City_Category
table(train$City_Category)
typeof(train$City_Category)
train$City_Category <- as.numeric(train$City_Category)
# Column - Stay_In_Current_City_Years
table(train$Stay_In_Current_City_Years)
typeof(train$Stay_In_Current_City_Years)
train$Stay_In_Current_City_Years <- as.numeric(train$Stay_In_Current_City_Years)
# Column - Product_Category_1, Product_Category_2, Product_Category_3
table(train$Product_Category_1, useNA = "ifany")
table(train$Product_Category_2, useNA = "ifany")
table(train$Product_Category_3, useNA = "ifany")
train$Product_Category_2[is.na(train$Product_Category_2)] <- 0
train$Product_Category_2 <- factor(train$Product_Category_2)
train$Product_Category_3 <- factor(train$Product_Category_3)
summary(train)
str(train)
train$Product_Category_3[is.na(train$Product_Category_3)] <- 0
summary(train)
# Column - Product_Category_1, Product_Category_2, Product_Category_3
table(train$Product_Category_1, useNA = "ifany")
table(train$Product_Category_2, useNA = "ifany")
table(train$Product_Category_3, useNA = "ifany")
train$Product_Category_2[is.na(train$Product_Category_2)] <- 0
train$Product_Category_2 <- factor(train$Product_Category_2)
train$Product_Category_3[is.na(train$Product_Category_3)] <- 0
View(train)
train$Product_Category_3[is.na(train$Product_Category_3)] <- 0
setwd("C:/Users/Shri/Desktop/for_git/black_friday_competition")
train <- read.csv("train.csv")
# Column - Product_Category_1, Product_Category_2, Product_Category_3
table(train$Product_Category_1, useNA = "ifany")
table(train$Product_Category_2, useNA = "ifany")
table(train$Product_Category_3, useNA = "ifany")
train$Product_Category_3[is.na(train$Product_Category_3)] <- 0
train$Product_Category_3 <- factor(train$Product_Category_3)
train$Product_Category_2[is.na(train$Product_Category_2)] <- 0
train$Product_Category_2 <- factor(train$Product_Category_2)
setwd("C:/Users/Shri/Desktop/for_git/black_friday_competition")
train <- read.csv("train.csv")
test <- read.csv("test.csv")
summary(train)
str(train)
# Column - Age
typeof(train$Age)
train$Age <- as.numeric(train$Age)
# Column - Gender
table(train$Gender)
typeof(train$Gender)
# Column - City_Category
table(train$City_Category)
typeof(train$City_Category)
train$City_Category <- as.numeric(train$City_Category)
# Column - Stay_In_Current_City_Years
table(train$Stay_In_Current_City_Years)
typeof(train$Stay_In_Current_City_Years)
train$Stay_In_Current_City_Years <- as.numeric(train$Stay_In_Current_City_Years)
# Column - Product_Category_1, Product_Category_2, Product_Category_3
table(train$Product_Category_1, useNA = "ifany")
train$Gender <- as.numeric(train$Gender)
table(train$Age, useNA = "ifany")
table(train$Product_Category_2, useNA = "ifany")
table(train$Product_Category_3, useNA = "ifany")
train$Product_Category_2[is.na(train$Product_Category_2)] <- 0
train$Product_Category_2 <- factor(train$Product_Category_2)
train$Product_Category_3[is.na(train$Product_Category_3)] <- 0
train$Product_Category_3 <- factor(train$Product_Category_3)
table(train$Product_Category_2, useNA = "ifany")
table(train$Product_Category_3, useNA = "ifany")
summary(train)
str(train)
# Modelling
# https://www.statmethods.net/advstats/cart.html
#install.packages("rpart")
library("rpart")
set.seed(12)
shape <- dim(train)
# Split the training data into train and test
# First we will test the accuracy of model on the data where we have labels and find RMSE
train_sample <- sample(shape[1], 545000)
train_data <- train[train_sample,]
test_data <- train[-train_sample,]
test_label <- test_data$Purchase
test_data <- test_data[-test_data$Purchase]
model <- rpart(Purchase ~ ., data = train_data)
predict <- predict(model, test_data)
error <- test_label - predict
RMSE <- sum(error)^2 / length(test_label)
print(RMSE)
final_res <- data.frame(cbind(test_label, predict, error))
print(sqrt(RMSE))
install.packages("caretEnsemble")
library("caretEnsemble")
?`caretEnsemble-package`
?`caretEnsemble
?caretEnsemble
;
;
d
final_res <- data.frame(cbind(test_label, predict, error))
c
dc
dcdcdcd''
''
'
q()
a
csl
ac;cz
x
?caretEnsemble
install.packages("caret")
exit
q()
